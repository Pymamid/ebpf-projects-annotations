#ifndef __BPF_HELPERS__

#define __BPF_HELPERS__

#include "bpf_helper_defs.h"

#define __uint(name, val) int (*name)[val]

#define __type(name, val) typeof(val) *name

#define __array(name, val) typeof(val) *name[]

#define SEC(name) \
	_Pragma("GCC diagnostic push")					    \
	_Pragma("GCC diagnostic ignored \"-Wignored-attributes\"")	    \
	__attribute__((section(name), used))				    \
	_Pragma("GCC diagnostic pop")					    \


#undef __always_inline

#define __always_inline inline __attribute__((always_inline))

#ifndef __noinline

#define __noinline __attribute__((noinline))

#endif

#ifndef __weak

#define __weak __attribute__((weak))

#endif

#define __hidden __attribute__((visibility("hidden")))

#ifndef NULL

#define NULL ((void *)0)

#endif

#ifndef KERNEL_VERSION

#define KERNEL_VERSION(a, b, c) (((a) << 16) + ((b) << 8) + ((c) > 255 ? 255 : (c)))

#endif

#ifndef offsetof

#define offsetof(TYPE, MEMBER)	((unsigned long)&((TYPE *)0)->MEMBER)

#endif

#ifndef container_of

#define container_of(ptr, type, member)				\
	({							\
		void *__mptr = (void *)(ptr);			\
		((type *)(__mptr - offsetof(type, member)));	\
	})

#endif

#ifndef __bpf_unreachable

# define __bpf_unreachable()	__builtin_trap()

#endif

#if __clang_major__ >= 8 && defined(__bpf__)

static __always_inline void bpf_tail_call_static (void *ctx, const void *map, const __u32 slot)
{
    if (!__builtin_constant_p (slot))
        __bpf_unreachable ();
    asm volatile ("r1 = %[ctx]\n\t"
        "r2 = %[map]\n\t"
        "r3 = %[slot]\n\t"
        "call 12"
        : : [ctx] "r"
        (ctx), [map] "r"
        (map), [slot] "i"
        (slot) : "r0",
        "r1",
        "r2",
        "r3",
        "r4",
        "r5"
        );
}

#endif

<struct>
struct bpf_map_def {
    unsigned int type;
    unsigned int key_size;
    unsigned int value_size;
    unsigned int max_entries;
    unsigned int map_flags;
}  __attribute__ ((deprecated ("use BTF-defined maps in .maps section")))
</struct>
;
enum libbpf_pin_type {LIBBPF_PIN_NONE, LIBBPF_PIN_BY_NAME,};
enum libbpf_tristate {
    TRI_NO = 0,
    TRI_YES = 1,
    TRI_MODULE = 2,};

#define __kconfig __attribute__((section(".kconfig")))

#define __ksym __attribute__((section(".ksyms")))

#ifndef ___bpf_concat

#define ___bpf_concat(a, b) a ## b

#endif

#ifndef ___bpf_apply

#define ___bpf_apply(fn, n) ___bpf_concat(fn, n)

#endif

#ifndef ___bpf_nth

#define ___bpf_nth(_, _1, _2, _3, _4, _5, _6, _7, _8, _9, _a, _b, _c, N, ...) N

#endif

#ifndef ___bpf_narg

#define ___bpf_narg(...) \
	___bpf_nth(_, ##__VA_ARGS__, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0)

#endif

#define ___bpf_fill0(arr, p, x) do {} while (0)

#define ___bpf_fill1(arr, p, x) arr[p] = x

#define ___bpf_fill2(arr, p, x, args...) arr[p] = x; ___bpf_fill1(arr, p + 1, args)

#define ___bpf_fill3(arr, p, x, args...) arr[p] = x; ___bpf_fill2(arr, p + 1, args)

#define ___bpf_fill4(arr, p, x, args...) arr[p] = x; ___bpf_fill3(arr, p + 1, args)

#define ___bpf_fill5(arr, p, x, args...) arr[p] = x; ___bpf_fill4(arr, p + 1, args)

#define ___bpf_fill6(arr, p, x, args...) arr[p] = x; ___bpf_fill5(arr, p + 1, args)

#define ___bpf_fill7(arr, p, x, args...) arr[p] = x; ___bpf_fill6(arr, p + 1, args)

#define ___bpf_fill8(arr, p, x, args...) arr[p] = x; ___bpf_fill7(arr, p + 1, args)

#define ___bpf_fill9(arr, p, x, args...) arr[p] = x; ___bpf_fill8(arr, p + 1, args)

#define ___bpf_fill10(arr, p, x, args...) arr[p] = x; ___bpf_fill9(arr, p + 1, args)

#define ___bpf_fill11(arr, p, x, args...) arr[p] = x; ___bpf_fill10(arr, p + 1, args)

#define ___bpf_fill12(arr, p, x, args...) arr[p] = x; ___bpf_fill11(arr, p + 1, args)

#define ___bpf_fill(arr, args...) \
	___bpf_apply(___bpf_fill, ___bpf_narg(args))(arr, 0, args)

#define BPF_SEQ_PRINTF(seq, fmt, args...)			\
({								\
	static const char ___fmt[] = fmt;			\
	unsigned long long ___param[___bpf_narg(args)];		\
								\
	_Pragma("GCC diagnostic push")				\
	_Pragma("GCC diagnostic ignored \"-Wint-conversion\"")	\
	___bpf_fill(___param, args);				\
	_Pragma("GCC diagnostic pop")				\
								\
	bpf_seq_printf(seq, ___fmt, sizeof(___fmt),		\
		       ___param, sizeof(___param));		\
})

#define BPF_SNPRINTF(out, out_size, fmt, args...)		\
({								\
	static const char ___fmt[] = fmt;			\
	unsigned long long ___param[___bpf_narg(args)];		\
								\
	_Pragma("GCC diagnostic push")				\
	_Pragma("GCC diagnostic ignored \"-Wint-conversion\"")	\
	___bpf_fill(___param, args);				\
	_Pragma("GCC diagnostic pop")				\
								\
	bpf_snprintf(out, out_size, ___fmt,			\
		     ___param, sizeof(___param));		\
})

#ifdef BPF_NO_GLOBAL_DATA

#define BPF_PRINTK_FMT_MOD

#else

#define BPF_PRINTK_FMT_MOD static const

#endif

#define __bpf_printk(fmt, ...)				\
({							\
	BPF_PRINTK_FMT_MOD char ____fmt[] = fmt;	\
	bpf_trace_printk(____fmt, sizeof(____fmt),	\
			 ##__VA_ARGS__);		\
})

#define __bpf_vprintk(fmt, args...)				\
({								\
	static const char ___fmt[] = fmt;			\
	unsigned long long ___param[___bpf_narg(args)];		\
								\
	_Pragma("GCC diagnostic push")				\
	_Pragma("GCC diagnostic ignored \"-Wint-conversion\"")	\
	___bpf_fill(___param, args);				\
	_Pragma("GCC diagnostic pop")				\
								\
	bpf_trace_vprintk(___fmt, sizeof(___fmt),		\
			  ___param, sizeof(___param));		\
})

#define ___bpf_pick_printk(...) \
	___bpf_nth(_, ##__VA_ARGS__, __bpf_vprintk, __bpf_vprintk, __bpf_vprintk,	\
		   __bpf_vprintk, __bpf_vprintk, __bpf_vprintk, __bpf_vprintk,		\
		   __bpf_vprintk, __bpf_vprintk, __bpf_printk /*3*/, __bpf_printk /*2*/,\
		   __bpf_printk /*1*/, __bpf_printk /*0*/)

#define bpf_printk(fmt, args...) ___bpf_pick_printk(args)(fmt, ##args)

#endif
